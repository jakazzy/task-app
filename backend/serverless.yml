service:
  name: serverless-todo-app

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TODOS_TABLE: Todos-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    TODOS_S3_BUCKET: serverless-udagram-asare-todos-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300


functions:

  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
    iamRoleStatementsName: ${self:service.name}-get-todos-role-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
    

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
    iamRoleStatementsName: ${self:service.name}-create-todo-role-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}

    iamRoleStatementsName: ${self:service.name}-update-todo-role-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
    
    

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

    iamRoleStatementsName: ${self:service.name}-generate-url-role-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
      - s3:PutObject
      - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*
      

resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL 
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
        # NotificationConfiguration:
        #   LambdaConfigurations:
        #     - Event: s3:ObjectCreated:*
        #       Function: !GetAtt SendUploadNotificationsLambdaFunction.Arn
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
        
    # SendUploadNotificationsPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName: !Ref SendUploadNotificationsLambdaFunction
    #     Principal: s3.amazonaws.com
    #     Action: lambda:InvokeFunction
    #     SourceAccount: !Ref AWS::AccountId
    #     SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket


#         {
#   "userId": "1",
#   "todoId": "1",
#   "createdAt": "11:32:26.694389",
#   "name": "wash the clothes",
#   "dueDate": "string",
#   "done": "true",
#   "attachmentUrl": "clothes.png"
# }

# {
#   "userId": "1",
#   "todoId": "2",
#   "createdAt": "11:32:26.694389",
#   "name": "clean the house",
#   "dueDate": "11:32:26.694389",
#   "done": "true",
#   "attachmentUrl": "clothes.png"
# }

# {
#   "userId": "1",
#   "todoId": "3",
#   "createdAt": "11:32:26.694389",
#   "name": "Read the books",
#   "dueDate": "11:32:26.694389",
#   "done": "true",
#   "attachmentUrl": "clothes.png"
# }